package ca.ulaval.glo2004.gui;

import ca.ulaval.glo2004.domaine.Chalet.Chalet;
import ca.ulaval.glo2004.domaine.Chalet.Controleur;
import ca.ulaval.glo2004.domaine.DTO.AccessoireDTO;
import ca.ulaval.glo2004.domaine.DTO.MurDTO;
import ca.ulaval.glo2004.domaine.utils.ConvertisseurVersDecimal;
import ca.ulaval.glo2004.domaine.utils.Erreur;
import ca.ulaval.glo2004.domaine.utils.Orientation;
import java.util.List;
import javax.swing.JOptionPane;
import ca.ulaval.glo2004.domaine.Mur.Accessoire;
import ca.ulaval.glo2004.domaine.Mur.Mur;
import ca.ulaval.glo2004.domaine.utils.Dimension;
import ca.ulaval.glo2004.domaine.utils.PointDecimal;
import ca.ulaval.glo2004.domaine.utils.PositionMur;
import ca.ulaval.glo2004.domaine.utils.SensToit;
import ca.ulaval.glo2004.domaine.utils.TypeAccessoire;
import ca.ulaval.glo2004.drawings.AfficheurMur;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.JOptionPane;
import ca.ulaval.glo2004.drawings.AfficheurMur;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.geom.Point2D;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Serializable;
import java.util.Stack;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.xml.transform.TransformerException;

public class MainWindow extends javax.swing.JFrame implements Serializable {

    public Controleur controleur;
    public ConvertisseurVersDecimal Convertisseur;
    public PositionMur PositionDeMur;
    private static final double ZOOM_FACTOR = 0.1;
    private Point initialMousePosition;
    private Rectangle rectangle;
    private UUID uuidAccessoireCourant;
    private TypeAccessoire typeAccessoireCourant;
    private int indexAccessoireCourant;
    private Point startPoint;
    private Point endPoint;
    private final javax.swing.JDialog dialogueExporter;
    private JTextField repositoryPath;

    private int maxWidth;
    private int maxHeight;

    public MainWindow() {
        controleur = new Controleur();
        controleur.setVueCourant(Orientation.DESSUS);
        Convertisseur = new ConvertisseurVersDecimal();
        PositionDeMur = new PositionMur();
        dialogueExporter = new javax.swing.JDialog();
        initComponents();
    }

    public Controleur getControleur() {
        return controleur;
    }

    public static void afficherErreur(List<Erreur> erreurs) {
        if (!erreurs.isEmpty()) {
            String titre;
            String message = "";
            if (erreurs.size() == 1) {
                titre = "Erreur";
                message += "L'action a été annulée en raison de l'erreur suivante : \n";
                message += erreurs.get(0).getMessage();
            } else {
                titre = "Erreurs";
                message = "L'action a été annulée en raison des erreurs suivantes : \n";
                int cpt = 1;
                for (Erreur erreur : erreurs) {
                    message += String.format("%d. %s \n", cpt, erreur.getMessage());
                    cpt++;
                }
            }
            JOptionPane.showMessageDialog(null, message.strip(), titre, JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void afficherPopup(String message, String titre, int messageType) {

        JOptionPane.showMessageDialog(null, message, titre, messageType);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        drawingPanel1 = new ca.ulaval.glo2004.gui.DrawingPanel(this);
        maxWidth = drawingPanel1.getWidth();
        maxHeight = drawingPanel1.getHeight();

        controleur.setMaxWidthAfficheur(maxWidth);
        controleur.setMaxHeightAfficheur(maxHeight);

        titreLabelAffichage = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panneauDeVues = new javax.swing.JPanel();
        vueDessus = new javax.swing.JButton();
        vueFacade = new javax.swing.JButton();
        vueArriere = new javax.swing.JButton();
        vueGauche = new javax.swing.JButton();
        vueDroite = new javax.swing.JButton();
        panneauEdition = new javax.swing.JPanel();
        typesAccessoire = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        hauteurAccessoire = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        largeurAccessoire = new javax.swing.JTextField();
        positionXAccessoire = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        AjouterAccessoireButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        Label_position_y = new javax.swing.JLabel();
        positionYAccessoire = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        Position_x_modification = new javax.swing.JTextField();
        Label_modification_y = new javax.swing.JLabel();
        Position_y_modification = new javax.swing.JTextField();
        deplacerAccessoireButton = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        Hauteur_modification = new javax.swing.JTextField();
        Largeur_modification = new javax.swing.JTextField();
        modifierAccessoireButton = new javax.swing.JButton();
        deplacerModifierAccessoire = new javax.swing.JButton();
        SupprimerAccessoireButton = new javax.swing.JButton();
        listeAccessoireCombo = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        listMurs = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        panneauDeToit = new javax.swing.JPanel();
        angleToit = new javax.swing.JTextField();
        validerSensToit = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        sensToitList = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        validerAngleToit = new javax.swing.JButton();
        panneauDeChalet = new javax.swing.JPanel();
        epaisseurMur = new javax.swing.JTextField();
        btnEpaisseurMur = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        rainureValue = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        epaisseurRainure = new javax.swing.JButton();
        dimensionChalet = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        chaletHauteur1 = new javax.swing.JTextField();
        chaletLongueur1 = new javax.swing.JTextField();
        chaletLargeur1 = new javax.swing.JTextField();
        panneauDeReference = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        positionSouris = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        valeurGrille = new javax.swing.JTextField();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        afficheurGrilleButton = new javax.swing.JButton();
        ResetZoom = new javax.swing.JButton();
        BarreDeMenu = new javax.swing.JMenuBar();
        ouvrirMenu = new javax.swing.JMenu();
        Sauvegarder = new javax.swing.JMenu();
        enregistrer = new javax.swing.JMenuItem();
        enregistrerSous = new javax.swing.JMenuItem();
        ExportationMenu = new javax.swing.JMenu();
        panneauxFinis = new javax.swing.JMenuItem();
        panneauxBruts = new javax.swing.JMenuItem();
        panneauxDeRetrait = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        AideMenu = new javax.swing.JMenu();
        QuitterMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        drawingPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingPanel1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                drawingPanel1MouseMoved(evt);
            }
        });
        drawingPanel1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                drawingPanel1MouseWheelMoved(evt);
            }
        });
        drawingPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawingPanel1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawingPanel1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout drawingPanel1Layout = new javax.swing.GroupLayout(drawingPanel1);
        drawingPanel1.setLayout(drawingPanel1Layout);
        drawingPanel1Layout.setHorizontalGroup(
            drawingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 687, Short.MAX_VALUE)
        );
        drawingPanel1Layout.setVerticalGroup(
            drawingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        titreLabelAffichage.setEditable(false);
        titreLabelAffichage.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        titreLabelAffichage.setText("DESSUS");
        titreLabelAffichage.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 0, 0)));

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        repaint();
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        vueDessus.setText("Vue de Dessus");
        vueDessus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vueDessusMouseClicked(evt);
            }
        });
        vueDessus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vueDessusActionPerformed(evt);
            }
        });

        vueFacade.setText("Vue de Facade");
        vueFacade.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vueFacadeMouseClicked(evt);
            }
        });
        vueFacade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vueFacadeActionPerformed(evt);
            }
        });

        vueArriere.setText("Vue Arriere");
        vueArriere.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vueArriereMouseClicked(evt);
            }
        });
        vueArriere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vueArriereActionPerformed(evt);
            }
        });

        vueGauche.setText("Vue de Gauche");
        vueGauche.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vueGaucheMouseClicked(evt);
            }
        });
        vueGauche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vueGaucheActionPerformed(evt);
            }
        });

        vueDroite.setText("Vue de Droite");
        vueDroite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vueDroiteMouseClicked(evt);
            }
        });
        vueDroite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vueDroiteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panneauDeVuesLayout = new javax.swing.GroupLayout(panneauDeVues);
        panneauDeVues.setLayout(panneauDeVuesLayout);
        panneauDeVuesLayout.setHorizontalGroup(
            panneauDeVuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panneauDeVuesLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(panneauDeVuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(vueFacade, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vueDroite, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addGroup(panneauDeVuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vueArriere, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vueGauche, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71))
            .addGroup(panneauDeVuesLayout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(vueDessus)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panneauDeVuesLayout.setVerticalGroup(
            panneauDeVuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panneauDeVuesLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(vueDessus)
                .addGap(80, 80, 80)
                .addGroup(panneauDeVuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vueFacade)
                    .addComponent(vueArriere))
                .addGap(84, 84, 84)
                .addGroup(panneauDeVuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vueGauche)
                    .addComponent(vueDroite))
                .addContainerGap(235, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Vues", panneauDeVues);

        typesAccessoire.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FENETRE", "PORTE" }));
        typesAccessoire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typesAccessoireActionPerformed(evt);
            }
        });

        jLabel1.setText("Type Accessoire");

        hauteurAccessoire.setText("10/5");
        hauteurAccessoire.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                hauteurAccessoireFocusLost(evt);
            }
        });
        hauteurAccessoire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hauteurAccessoireActionPerformed(evt);
            }
        });
        hauteurAccessoire.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hauteurAccessoireKeyTyped(evt);
            }
        });

        jLabel2.setText("Largeur :");

        largeurAccessoire.setText("10/5");
        largeurAccessoire.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                largeurAccessoireFocusLost(evt);
            }
        });
        largeurAccessoire.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                largeurAccessoireKeyTyped(evt);
            }
        });

        positionXAccessoire.setText("10/5");
        positionXAccessoire.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                positionXAccessoireFocusLost(evt);
            }
        });
        positionXAccessoire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionXAccessoireActionPerformed(evt);
            }
        });
        positionXAccessoire.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                positionXAccessoireKeyTyped(evt);
            }
        });

        jLabel3.setText("Position X :");

        AjouterAccessoireButton.setText("Ajouter Accessoire");
        AjouterAccessoireButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                AjouterAccessoireButtonStateChanged(evt);
            }
        });
        AjouterAccessoireButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AjouterAccessoireButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Hauteur :");

        Label_position_y.setText("Position Y :");

        positionYAccessoire.setText("10/5");
        positionYAccessoire.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                positionYAccessoireFocusLost(evt);
            }
        });
        positionYAccessoire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionYAccessoireActionPerformed(evt);
            }
        });
        positionYAccessoire.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                positionYAccessoireKeyTyped(evt);
            }
        });

        jLabel17.setText("Position X :");

        Position_x_modification.setText("10/5");
        Position_x_modification.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Position_x_modificationFocusLost(evt);
            }
        });
        Position_x_modification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Position_x_modificationActionPerformed(evt);
            }
        });
        Position_x_modification.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Position_x_modificationKeyTyped(evt);
            }
        });

        Label_modification_y.setText("Position Y :");

        Position_y_modification.setText("10/5");
        Position_y_modification.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Position_y_modificationFocusLost(evt);
            }
        });
        Position_y_modification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Position_y_modificationActionPerformed(evt);
            }
        });
        Position_y_modification.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Position_y_modificationKeyTyped(evt);
            }
        });

        deplacerAccessoireButton.setText("Deplacer Accessoire");
        deplacerAccessoireButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deplacerAccessoireButtonActionPerformed(evt);
            }
        });

        jLabel19.setText("Hauteur");

        jLabel20.setText("Largeur");

        Hauteur_modification.setText("10/5");
        Hauteur_modification.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Hauteur_modificationFocusLost(evt);
            }
        });
        Hauteur_modification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hauteur_modificationActionPerformed(evt);
            }
        });
        Hauteur_modification.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Hauteur_modificationKeyTyped(evt);
            }
        });

        Largeur_modification.setText("10/5");
        Largeur_modification.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Largeur_modificationFocusLost(evt);
            }
        });
        Largeur_modification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Largeur_modificationActionPerformed(evt);
            }
        });
        Largeur_modification.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Largeur_modificationKeyTyped(evt);
            }
        });

        modifierAccessoireButton.setText("Modifer Accessoire");
        modifierAccessoireButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifierAccessoireButtonActionPerformed(evt);
            }
        });

        deplacerModifierAccessoire.setText("Deplacer et Modifier Accessoire");
        deplacerModifierAccessoire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deplacerModifierAccessoireActionPerformed(evt);
            }
        });

        SupprimerAccessoireButton.setText("Supprimer Accessoire");
        SupprimerAccessoireButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SupprimerAccessoireButtonActionPerformed(evt);
            }
        });

        listeAccessoireCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listeAccessoireComboActionPerformed(evt);
            }
        });

        jLabel16.setText("Liste Accessoires");

        jLabel21.setText("Listes Murs");

        listMurs.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Facade", "Arriere", "Gauche", "Droite" }));
        listMurs.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listMursItemStateChanged(evt);
            }
        });
        listMurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listMursActionPerformed(evt);
            }
        });

        jLabel4.setText("Modification Accessoire");

        javax.swing.GroupLayout panneauEditionLayout = new javax.swing.GroupLayout(panneauEdition);
        panneauEdition.setLayout(panneauEditionLayout);
        panneauEditionLayout.setHorizontalGroup(
            panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panneauEditionLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(AjouterAccessoireButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 170, Short.MAX_VALUE))
            .addGroup(panneauEditionLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(deplacerAccessoireButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(modifierAccessoireButton)
                .addGap(52, 52, 52))
            .addGroup(panneauEditionLayout.createSequentialGroup()
                .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panneauEditionLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panneauEditionLayout.createSequentialGroup()
                                .addComponent(Label_position_y)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(panneauEditionLayout.createSequentialGroup()
                                .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel2))
                                    .addComponent(jLabel3))
                                .addGap(32, 32, 32)))
                        .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(positionYAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(largeurAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hauteurAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(positionXAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panneauEditionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(typesAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel21)
                        .addGap(18, 18, 18)
                        .addComponent(listMurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panneauEditionLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)
                        .addComponent(listeAccessoireCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panneauEditionLayout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SupprimerAccessoireButton, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(panneauEditionLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel17)
                            .addComponent(Label_modification_y))
                        .addGap(18, 18, 18)
                        .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panneauEditionLayout.createSequentialGroup()
                                .addComponent(Position_y_modification, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel20))
                            .addGroup(panneauEditionLayout.createSequentialGroup()
                                .addComponent(Position_x_modification, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel19)
                                .addGap(10, 10, 10)))
                        .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Hauteur_modification, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(Largeur_modification)))
                    .addGroup(panneauEditionLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(deplacerModifierAccessoire)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panneauEditionLayout.setVerticalGroup(
            panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panneauEditionLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(typesAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(listMurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(hauteurAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(largeurAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(positionXAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label_position_y)
                    .addComponent(positionYAccessoire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AjouterAccessoireButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(listeAccessoireCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(SupprimerAccessoireButton)
                .addGap(26, 26, 26)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(Position_x_modification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hauteur_modification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(18, 18, 18)
                .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Largeur_modification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(Position_y_modification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_modification_y))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panneauEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deplacerAccessoireButton)
                    .addComponent(modifierAccessoireButton))
                .addGap(18, 18, 18)
                .addComponent(deplacerModifierAccessoire)
                .addGap(44, 44, 44))
        );

        jTabbedPane1.addTab("Mur", panneauEdition);

        angleToit.setText("45");
        angleToit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                angleToitFocusLost(evt);
            }
        });
        angleToit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                angleToitActionPerformed(evt);
            }
        });
        angleToit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                angleToitKeyTyped(evt);
            }
        });

        validerSensToit.setText("Valider Sens du Toit");
        validerSensToit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validerSensToitActionPerformed(evt);
            }
        });

        jLabel9.setText("Angle :");

        sensToitList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AVANT-ARRIERE", "GAUCHE-DROITE" }));
        sensToitList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sensToitListActionPerformed(evt);
            }
        });

        jLabel12.setText("Sens du Toit : ");

        validerAngleToit.setText("Valider Angle");
        validerAngleToit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validerAngleToitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panneauDeToitLayout = new javax.swing.GroupLayout(panneauDeToit);
        panneauDeToit.setLayout(panneauDeToitLayout);
        panneauDeToitLayout.setHorizontalGroup(
            panneauDeToitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panneauDeToitLayout.createSequentialGroup()
                .addGroup(panneauDeToitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panneauDeToitLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panneauDeToitLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGap(79, 79, 79)))
                .addGroup(panneauDeToitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(angleToit, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addComponent(sensToitList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(89, 89, 89))
            .addGroup(panneauDeToitLayout.createSequentialGroup()
                .addGroup(panneauDeToitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panneauDeToitLayout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(validerAngleToit))
                    .addGroup(panneauDeToitLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(validerSensToit, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panneauDeToitLayout.setVerticalGroup(
            panneauDeToitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panneauDeToitLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(panneauDeToitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(angleToit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addComponent(validerAngleToit)
                .addGap(171, 171, 171)
                .addGroup(panneauDeToitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sensToitList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addComponent(validerSensToit)
                .addContainerGap(233, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Toit", panneauDeToit);

        epaisseurMur.setText("6/2");
        epaisseurMur.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                epaisseurMurFocusLost(evt);
            }
        });
        epaisseurMur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epaisseurMurActionPerformed(evt);
            }
        });
        epaisseurMur.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                epaisseurMurKeyTyped(evt);
            }
        });

        btnEpaisseurMur.setText("Valider Epaisseur Panneau");
        btnEpaisseurMur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEpaisseurMurActionPerformed(evt);
            }
        });

        jLabel10.setText("Epaisseur Panneau :");

        jLabel11.setText("Epaisseur Rainure :");

        rainureValue.setText("3/2");
        rainureValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rainureValueFocusLost(evt);
            }
        });
        rainureValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rainureValueActionPerformed(evt);
            }
        });
        rainureValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rainureValueKeyTyped(evt);
            }
        });

        jLabel13.setText("Dimension Chalet :");

        epaisseurRainure.setText("Valider Epaisseur Rainure");
        epaisseurRainure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epaisseurRainureActionPerformed(evt);
            }
        });

        dimensionChalet.setText("Valider Dimension Chalet");
        dimensionChalet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dimensionChaletActionPerformed(evt);
            }
        });

        jLabel5.setText("Longueur");

        jLabel14.setText("Largeur");

        jLabel15.setText("Hauteur");

        chaletHauteur1.setText("15");
        chaletHauteur1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                chaletHauteur1FocusLost(evt);
            }
        });
        chaletHauteur1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                chaletHauteur1KeyTyped(evt);
            }
        });

        chaletLongueur1.setText("10");
        chaletLongueur1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                chaletLongueur1FocusLost(evt);
            }
        });
        chaletLongueur1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                chaletLongueur1KeyTyped(evt);
            }
        });

        chaletLargeur1.setText("20");
        chaletLargeur1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                chaletLargeur1FocusLost(evt);
            }
        });
        chaletLargeur1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                chaletLargeur1KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout panneauDeChaletLayout = new javax.swing.GroupLayout(panneauDeChalet);
        panneauDeChalet.setLayout(panneauDeChaletLayout);
        panneauDeChaletLayout.setHorizontalGroup(
            panneauDeChaletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panneauDeChaletLayout.createSequentialGroup()
                .addGroup(panneauDeChaletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panneauDeChaletLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(panneauDeChaletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addComponent(jLabel13)))
                    .addGroup(panneauDeChaletLayout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(btnEpaisseurMur, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panneauDeChaletLayout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(dimensionChalet, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panneauDeChaletLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addGroup(panneauDeChaletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(epaisseurRainure, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panneauDeChaletLayout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(jLabel14)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panneauDeChaletLayout.createSequentialGroup()
                .addGroup(panneauDeChaletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panneauDeChaletLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15))
                    .addGroup(panneauDeChaletLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(rainureValue, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panneauDeChaletLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(epaisseurMur, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(79, 79, 79))
            .addGroup(panneauDeChaletLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(chaletLongueur1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(chaletLargeur1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(chaletHauteur1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        panneauDeChaletLayout.setVerticalGroup(
            panneauDeChaletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panneauDeChaletLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(panneauDeChaletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(epaisseurMur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addComponent(btnEpaisseurMur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addGroup(panneauDeChaletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rainureValue, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addComponent(epaisseurRainure)
                .addGap(34, 34, 34)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panneauDeChaletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel15)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addGroup(panneauDeChaletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chaletLongueur1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chaletLargeur1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chaletHauteur1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(dimensionChalet)
                .addGap(98, 98, 98))
        );

        jTabbedPane1.addTab("Chalet", panneauDeChalet);

        panneauDeReference.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel7.setText("Position");

        positionSouris.setEditable(false);

        jLabel8.setText("Grille :");

        valeurGrille.setText("1");
        valeurGrille.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                valeurGrilleFocusLost(evt);
            }
        });
        valeurGrille.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                valeurGrilleKeyTyped(evt);
            }
        });

        undoButton.setText("Undo");
        undoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                undoButtonMouseClicked(evt);
            }
        });

        redoButton.setText("Redo");
        redoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                redoButtonMouseClicked(evt);
            }
        });

        afficheurGrilleButton.setText("Afficher Grille");
        afficheurGrilleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afficheurGrilleButtonActionPerformed(evt);
            }
        });

        ResetZoom.setText("Reset");
        ResetZoom.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ResetZoom.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ResetZoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResetZoomMouseClicked(evt);
            }
        });
        ResetZoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetZoomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panneauDeReferenceLayout = new javax.swing.GroupLayout(panneauDeReference);
        panneauDeReference.setLayout(panneauDeReferenceLayout);
        panneauDeReferenceLayout.setHorizontalGroup(
            panneauDeReferenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panneauDeReferenceLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(positionSouris, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valeurGrille, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(afficheurGrilleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ResetZoom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(undoButton)
                .addGap(18, 18, 18)
                .addComponent(redoButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panneauDeReferenceLayout.setVerticalGroup(
            panneauDeReferenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panneauDeReferenceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panneauDeReferenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(afficheurGrilleButton)
                    .addGroup(panneauDeReferenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(valeurGrille, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panneauDeReferenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(positionSouris)
                            .addComponent(jLabel8))
                        .addComponent(ResetZoom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panneauDeReferenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(undoButton)
                            .addComponent(redoButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ouvrirMenu.setText("Ouvrir");
        ouvrirMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ouvrirMenuMouseClicked(evt);
            }
        });
        BarreDeMenu.add(ouvrirMenu);

        Sauvegarder.setText("Sauvegarder");
        Sauvegarder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SauvegarderActionPerformed(evt);
            }
        });

        enregistrer.setText("Enregistrer");
        enregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enregistrerActionPerformed(evt);
            }
        });
        Sauvegarder.add(enregistrer);

        enregistrerSous.setText("Enregistrer-Sous");
        enregistrerSous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enregistrerSousActionPerformed(evt);
            }
        });
        Sauvegarder.add(enregistrerSous);

        BarreDeMenu.add(Sauvegarder);

        ExportationMenu.setText("Exportation Panneau");

        panneauxFinis.setText("Panneaux Finis ");
        panneauxFinis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panneauxFinisActionPerformed(evt);
            }
        });
        ExportationMenu.add(panneauxFinis);

        panneauxBruts.setText("Panneaux Bruts");
        panneauxBruts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panneauxBrutsActionPerformed(evt);
            }
        });
        ExportationMenu.add(panneauxBruts);

        panneauxDeRetrait.setText("Panneaux De Retrait ");
        panneauxDeRetrait.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panneauxDeRetraitActionPerformed(evt);
            }
        });
        ExportationMenu.add(panneauxDeRetrait);

        jMenuItem1.setText("Dimension Panneaux");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        ExportationMenu.add(jMenuItem1);

        BarreDeMenu.add(ExportationMenu);

        jMenu1.setText("Réinitialiseur de Chalet");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        BarreDeMenu.add(jMenu1);

        AideMenu.setText("Aide");
        AideMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AideMenuMouseClicked(evt);
            }
        });
        BarreDeMenu.add(AideMenu);

        QuitterMenu.setText("Quitter");
        QuitterMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QuitterMenuMouseClicked(evt);
            }
        });
        BarreDeMenu.add(QuitterMenu);

        setJMenuBar(BarreDeMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panneauDeReference, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(drawingPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(222, 222, 222)
                        .addComponent(titreLabelAffichage, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titreLabelAffichage, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(drawingPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(panneauDeReference, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Enleve le auto Focus quand tu vas sur les windows divers.
    private static class NoFocusTraversalPolicy extends FocusTraversalPolicy {
       
        public Component getComponentAfter(Container aContainer, Component aComponent) 
        {
            return null;
        }
        
        public Component getComponentBefore(Container aContainer, Component aComponent) 
        {
            return null;
        }
       
        public Component getFirstComponent(Container aContainer) 
        {
            return null;
        }
        
        public Component getLastComponent(Container aContainer) 
        {
            return null;
        }
        
        public Component getDefaultComponent(Container aContainer) 
        {
            return null;
        }
    }    
    
    private void vueDessusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vueDessusActionPerformed
        titreLabelAffichage.setText("DESSUS");
        this.controleur.setVueCourant(Orientation.DESSUS);
        addAccessoireToComboBox();
        sensToitListFirstValue();  
        this.drawingPanel1.repaint();        
    }//GEN-LAST:event_vueDessusActionPerformed

    private void epaisseurMurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_epaisseurMurActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_epaisseurMurActionPerformed

    private void typesAccessoireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typesAccessoireActionPerformed
        // TODO add your handling code here:
          // TODO add your handling code here:
       String selected_option = typesAccessoire.getSelectedItem().toString();
              Color colour = panneauEdition.getBackground();
       if ("FENETRE".equals(selected_option))
       {
         //Dans la création de la porte 
         positionYAccessoire.setVisible(true);
         positionYAccessoire.setEnabled(true);
         
         Label_position_y.setVisible(true);
         
//        //Dans la modification de la porte 
//         Position_y_modification.setEnabled(true);
//         Position_y_modification.setBorder(new LineBorder(Color.LIGHT_GRAY));
//         Position_y_modification.setBackground(colour.WHITE);
//         Position_y_modification.setText("9\"1/3");
//                  
//         Label_modification_y.setVisible(true);
       }
       else if ("PORTE".equals(selected_option))
       {
         //Dans la creation de la porte 
        
         positionYAccessoire.setVisible(false);
         positionYAccessoire.setEnabled(false);
         
         Label_position_y.setVisible(false);
         
//         //Dans la modification de la porte 
//         
////         Position_y_modification.setVisible(false);
//         Position_y_modification.setEnabled(false);
//         Position_y_modification.setBorder(new LineBorder(colour));  
//         Position_y_modification.setBackground(colour);         
//         Position_y_modification.setText("");
//         
//         Label_modification_y.setVisible(false);
         
                  
       }

    }//GEN-LAST:event_typesAccessoireActionPerformed

    private void QuitterMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QuitterMenuMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_QuitterMenuMouseClicked

    public void sensToitListFirstValue() {
        if (this.controleur.getSensToitCourant() == SensToit.AVANT_ARRIERE) {
            this.sensToitList.setSelectedIndex(0);
        } else {
            this.sensToitList.setSelectedIndex(1);
        }
    }
    private void vueArriereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vueArriereActionPerformed
        titreLabelAffichage.setText("ARRIERE");
        this.controleur.setVueCourant(Orientation.ARRIERE);
        addAccessoireToComboBox();
        sensToitListFirstValue();
        this.listMurs.setSelectedIndex(2);
        this.drawingPanel1.repaint();
    }//GEN-LAST:event_vueArriereActionPerformed

    private void vueGaucheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vueGaucheActionPerformed
        titreLabelAffichage.setText("GAUCHE");
        this.controleur.setVueCourant(Orientation.GAUCHE);
        addAccessoireToComboBox();
        sensToitListFirstValue();
        this.listMurs.setSelectedIndex(3);
        this.drawingPanel1.repaint();
    }//GEN-LAST:event_vueGaucheActionPerformed

    private void vueFacadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vueFacadeActionPerformed
        titreLabelAffichage.setText("FACADE");
        this.controleur.setVueCourant(Orientation.FACADE);
        addAccessoireToComboBox();
        sensToitListFirstValue();
        this.listMurs.setSelectedIndex(1);
        this.drawingPanel1.repaint();
    }//GEN-LAST:event_vueFacadeActionPerformed

    private void vueDroiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vueDroiteActionPerformed
        titreLabelAffichage.setText("DROITE");
        addAccessoireToComboBox();
        this.controleur.setVueCourant(Orientation.DROITE);
        addAccessoireToComboBox();
        this.listMurs.setSelectedIndex(4);
        sensToitListFirstValue();
        this.drawingPanel1.repaint();
    }//GEN-LAST:event_vueDroiteActionPerformed

    private void afficheurGrilleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afficheurGrilleButtonActionPerformed
        try {
            int v = (int)Convertisseur.parseFraction(valeurGrille.getText())*12;
            controleur.setDimensionGrille(v);
            controleur.switchAfficherGrille();
            String toggle = afficheurGrilleButton.getText();            
            afficheurGrilleButton.setMinimumSize(new java.awt.Dimension(131, 28));
            if ("Afficher Grille".equals(toggle))
            {
                afficheurGrilleButton.setText("Enlever Grille");
            }
            else
            {
                afficheurGrilleButton.setText("Afficher Grille");
            }
            repaint();
        } catch (Exception e) {

            String erroMsg = "inserer des valeurs correctes s'il vous plait, exemple 4";
            Erreur error = new Erreur(erroMsg);
            List<Erreur> erreurs = new ArrayList<>();
            erreurs.add(error);
            afficherErreur(erreurs);
            repaint();

        }

    }//GEN-LAST:event_afficheurGrilleButtonActionPerformed

    private void positionXAccessoireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionXAccessoireActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_positionXAccessoireActionPerformed

    private void hauteurAccessoireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hauteurAccessoireActionPerformed
        
    }//GEN-LAST:event_hauteurAccessoireActionPerformed

    private void modifierAccessoireButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifierAccessoireButtonActionPerformed
        // TODO add your handling code here:
        if (this.controleur.getVueCourant() != Orientation.DESSUS) {
            try {
                int index = listeAccessoireCombo.getSelectedIndex();
                String hauteur = Hauteur_modification.getText();
                String largeur = Largeur_modification.getText();
                PointDecimal pDecimal;
                int distanceMin = 3;
                Dimension dimension = new Dimension(0, (int)Convertisseur.parseFraction(largeur)*12, (int)Convertisseur.parseFraction(hauteur)*12);
                if (listeAccessoireCombo.getItemCount() > 0) {
                    AccessoireDTO accessoireCourant = this.controleur.getMurDTOCourant(this.controleur.getVueCourant()).AccessoiresList.get(index);
                    TypeAccessoire typeAcc = accessoireCourant.TypeAccessoire;
                    MurDTO murCourant = this.controleur.getMurDTOCourant(this.controleur.getVueCourant());
                    if(typeAcc == TypeAccessoire.FENETRE){
                        controleur.modifierAccessoire(index, dimension);
                    }else{
                        if (this.controleur.getVueCourant() == Orientation.ARRIERE || this.controleur.getVueCourant() == Orientation.FACADE) {
                            
                            pDecimal = new PointDecimal(accessoireCourant.Position.getX(), (PositionDeMur.PositionYMurFacadeArriere  + murCourant.Dimension.getHauteur()) -  (dimension.getHauteur()+distanceMin));
                            controleur.deplacerModifierAccessoire(index, dimension, pDecimal);
                        } else {
                            pDecimal = new PointDecimal(accessoireCourant.Position.getX(), (PositionDeMur.PositionYMurGaucheDroit  + murCourant.Dimension.getHauteur()) -  (dimension.getHauteur()+distanceMin));
                            controleur.deplacerModifierAccessoire(index, dimension, pDecimal);
                        }
                        
                    }
                    repaint();

                } else {
                    Erreur error = new Erreur("La liste d'accessoires est vide!");
                    List<Erreur> erreurs = new ArrayList<>();
                    erreurs.add(error);
                    afficherErreur(erreurs);
                    repaint();
                }

            } catch (Exception e) {
                String erroMsg = "inserer des valeurs correctes s'il vous plait, exemple 4";
                Erreur error = new Erreur(erroMsg);
                List<Erreur> erreurs = new ArrayList<>();
                erreurs.add(error);
                afficherErreur(erreurs);
                repaint();
            }

        } else {
            Erreur error = new Erreur("Changer de vue s.v.p");
            List<Erreur> erreurs = new ArrayList<>();
            erreurs.add(error);
            afficherErreur(erreurs);
            repaint();
        }

    }//GEN-LAST:event_modifierAccessoireButtonActionPerformed


    private void AjouterAccessoireButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjouterAccessoireButtonActionPerformed
        // TODO add your handling code here:
        if (this.controleur.getVueCourant() == Orientation.DESSUS) {
            Erreur error = new Erreur("Changer de vue s.v.p");
            List<Erreur> erreurs = new ArrayList<>();
            erreurs.add(error);
            afficherErreur(erreurs);
            repaint();

        } else {
            try {

                // Récuperation des données de l'accessoire
                String hauteurAccessoire_1 = hauteurAccessoire.getText();
                String largeurAccessoire_1 = largeurAccessoire.getText();
                int distanceMin = 4;

                String positionXAccessoire_1 = positionXAccessoire.getText();
                String positionYAccessoire_1 = positionYAccessoire.getText();

                // Convertion des données de l'accessoire en décimales
                PointDecimal pointXY;
                pointXY = new PointDecimal((int)Convertisseur.parseFraction(positionXAccessoire_1)*12, ((int)Convertisseur.parseFraction(positionYAccessoire_1) * 12));
                
                Dimension dimensions = new Dimension(0, (int)Convertisseur.parseFraction(hauteurAccessoire_1) * 12, (int)Convertisseur.parseFraction(largeurAccessoire_1)* 12);

                String typesAccessoire_1 = (String) typesAccessoire.getSelectedItem();
                MurDTO murCourant = this.controleur.getMurDTOCourant(Orientation.FACADE);
                if ("FENETRE".equals(typesAccessoire_1)) {
                    if (this.controleur.getVueCourant() == Orientation.ARRIERE || this.controleur.getVueCourant() == Orientation.FACADE) {
                        pointXY = new PointDecimal(pointXY.getX() + PositionDeMur.PositionXMurFacadeArriere, pointXY.getY() + PositionDeMur.PositionYMurFacadeArriere);
                        this.controleur.ajouterFenetre(this.controleur.getVueCourant(), dimensions, pointXY);
                    } else {
                        pointXY = new PointDecimal(pointXY.getX() + PositionDeMur.PositionXMurGaucheDroit, pointXY.getY() + PositionDeMur.PositionYMurGaucheDroit);
                        this.controleur.ajouterFenetre(this.controleur.getVueCourant(), dimensions, pointXY);
                    }

                } else {
                    if (this.controleur.getVueCourant() == Orientation.ARRIERE || this.controleur.getVueCourant() == Orientation.FACADE) {
                        pointXY = new PointDecimal(pointXY.getX() + PositionDeMur.PositionXMurFacadeArriere, (PositionDeMur.PositionYMurFacadeArriere  + murCourant.Dimension.getHauteur()) -  (dimensions.getHauteur()+ distanceMin));
                        this.controleur.ajouterPorte(this.controleur.getVueCourant(), dimensions, pointXY);
                    } else {
                        pointXY = new PointDecimal(pointXY.getX() + PositionDeMur.PositionXMurGaucheDroit, (PositionDeMur.PositionYMurGaucheDroit  + murCourant.Dimension.getHauteur()) - (dimensions.getHauteur()+ distanceMin));
                        this.controleur.ajouterPorte(this.controleur.getVueCourant(), dimensions, pointXY);
                    }

                }
                repaint();
                addAccessoireToComboBox();

            } catch (Exception e) {
                String erroMsg = "inserer des valeurs correctes s'il vous plait, exemple 4/2";
                Erreur error = new Erreur(erroMsg);
                List<Erreur> erreurs = new ArrayList<>();
                erreurs.add(error);
                afficherErreur(erreurs);
                repaint();
            }
        }

    }//GEN-LAST:event_AjouterAccessoireButtonActionPerformed
    public void addAccessoireToComboBox() {
        Orientation vueCourant = this.controleur.getVueCourant();
        this.listeAccessoireCombo.removeAllItems();

        if (vueCourant == Orientation.ARRIERE) {
            MurDTO murArriere = this.controleur.getChaletDTO().MurArriereDTO;
            List<AccessoireDTO> accessoires = murArriere.AccessoiresList;
            int k = 0;
            for (AccessoireDTO accessoire : accessoires) {

                this.listeAccessoireCombo.addItem(accessoire.LabelAccessoire);
                this.listeAccessoireCombo.setSelectedIndex(k);
                k++;
            }

        }
        if (vueCourant == Orientation.GAUCHE) {
            MurDTO murGauche = this.controleur.getChaletDTO().MurGaucheDTO;
            List<AccessoireDTO> accessoires = murGauche.AccessoiresList;
            int k = 0;
            for (AccessoireDTO accessoire : accessoires) {

                this.listeAccessoireCombo.addItem(accessoire.LabelAccessoire);
                this.listeAccessoireCombo.setSelectedIndex(k);
                k++;
            }

        }
        if (vueCourant == Orientation.DROITE) {
            MurDTO murDroite = this.controleur.getChaletDTO().MurDroiteDTO;
            List<AccessoireDTO> accessoires = murDroite.AccessoiresList;
            int k = 0;
            for (AccessoireDTO accessoire : accessoires) {

                this.listeAccessoireCombo.addItem(accessoire.LabelAccessoire);
                this.listeAccessoireCombo.setSelectedIndex(k);
                k++;
            }

        }
        if (vueCourant == Orientation.FACADE) {
            MurDTO murFacade = this.controleur.getChaletDTO().MurFacadeDTO;
            List<AccessoireDTO> accessoires = murFacade.AccessoiresList;
            int k = 0;
            for (AccessoireDTO accessoire : accessoires) {

                this.listeAccessoireCombo.addItem(accessoire.LabelAccessoire);
                this.listeAccessoireCombo.setSelectedIndex(k);
                k++;
            }

        }
    }


    public JFileChooser getFileChooser(String titre) {
        JFileChooser selectionFichier = new JFileChooser();
        selectionFichier.setDialogTitle(titre);

        FileFilter filtre = new FileNameExtensionFilter("Fichiers Chalet (*.chalet)", new String[]{"chalet"});
        selectionFichier.removeChoosableFileFilter(selectionFichier.getAcceptAllFileFilter());
        selectionFichier.addChoosableFileFilter(filtre);

        return selectionFichier;
    }

    private void SupprimerAccessoireButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SupprimerAccessoireButtonActionPerformed
        if (this.controleur.getVueCourant() != Orientation.DESSUS) {
            if (this.listeAccessoireCombo.getItemCount() > 0) {

                String selectedAccessoire = (String) listeAccessoireCombo.getSelectedItem();
                int selectedIndex = listeAccessoireCombo.getSelectedIndex();
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        listeAccessoireCombo.removeItem(selectedAccessoire);
                        controleur.supprimerAccessoire(selectedIndex);
                        repaint();
                        addAccessoireToComboBox();
                        repaint();
                    }
                });
            } else {
                Erreur error = new Erreur("La liste d'accessoire est vide pour cette vue ");
                List<Erreur> erreurs = new ArrayList<>();
                erreurs.add(error);
                afficherErreur(erreurs);
                repaint();
            }
        } else {
            Erreur error = new Erreur("Vous n'etes pas dans une vue du Mur, changer de vue, s'il vous plait!");
            List<Erreur> erreurs = new ArrayList<>();
            erreurs.add(error);
            afficherErreur(erreurs);
            repaint();
        }

        repaint();
    }//GEN-LAST:event_SupprimerAccessoireButtonActionPerformed

    private void sensToitListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensToitListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sensToitListActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:

        //Enleve le auto Focus quand tu vas sur les windows divers.
//        jPanel1.setFocusTraversalPolicyProvider(true);
//        jPanel1.setFocusTraversalPolicy(new NoFocusTraversalPolicy());
        panneauEdition.setFocusTraversalPolicyProvider(true);
        panneauEdition.setFocusTraversalPolicy(new NoFocusTraversalPolicy());
        panneauDeToit.setFocusTraversalPolicyProvider(true);
        panneauDeToit.setFocusTraversalPolicy(new NoFocusTraversalPolicy());
        panneauDeChalet.setFocusTraversalPolicyProvider(true);
        panneauDeChalet.setFocusTraversalPolicy(new NoFocusTraversalPolicy());        
              
        Orientation vue = controleur.getVueCourant();        
        if (vue == Orientation.DESSUS){
            vueDessus.setFocusPainted(true);
            vueDessus.requestFocus();
        }
        if (vue == Orientation.ARRIERE){
            vueArriere.setFocusPainted(true);
            vueArriere.requestFocus();
        }
        if (vue == Orientation.DROITE){
            vueDroite.setFocusPainted(true);
            vueDroite.requestFocus();
        }
        if (vue == Orientation.FACADE){
            vueFacade.setFocusPainted(true);
            vueFacade.requestFocus();
        }
        if (vue == Orientation.GAUCHE){
            vueGauche.setFocusPainted(true);
            vueGauche.requestFocus();
        }                
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void deplacerAccessoireButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deplacerAccessoireButtonActionPerformed
        // TODO add your handling code here:
        if (this.controleur.getVueCourant() != Orientation.DESSUS) {

            try {
                int index = listeAccessoireCombo.getSelectedIndex();
                String xPosition = Position_x_modification.getText();
                String yPosition = Position_y_modification.getText();
                
                if (listeAccessoireCombo.getItemCount() > 0) {
                    AccessoireDTO accessoireCourant = this.controleur.getMurDTOCourant(this.controleur.getVueCourant()).AccessoiresList.get(index);
                    TypeAccessoire typeAcc = accessoireCourant.TypeAccessoire;
                    if (this.controleur.getVueCourant() == Orientation.ARRIERE || this.controleur.getVueCourant() == Orientation.FACADE) {
                        if(typeAcc == TypeAccessoire.FENETRE){
                            PointDecimal position = new PointDecimal((int)Convertisseur.parseFraction(xPosition)*12, (int)Convertisseur.parseFraction(yPosition)*12);
                            position = new PointDecimal(position.getX() + PositionDeMur.PositionXMurFacadeArriere, position.getY() + PositionDeMur.PositionYMurFacadeArriere);
                            controleur.deplacerAccessoire(index, position,false);
                        }else{
                            int x = (int)Convertisseur.parseFraction(xPosition)*12;
                            PointDecimal position = new PointDecimal(x  + PositionDeMur.PositionXMurFacadeArriere, accessoireCourant.Position.getY());
                            controleur.deplacerAccessoire(index, position,false);
                        }
                    } else {
                        if(typeAcc == TypeAccessoire.FENETRE){
                            PointDecimal position = new PointDecimal((int)Convertisseur.parseFraction(xPosition)*12, (int)Convertisseur.parseFraction(yPosition)* 12);
                            position = new PointDecimal(position.getX() + PositionDeMur.PositionXMurGaucheDroit, position.getY() + PositionDeMur.PositionYMurGaucheDroit);
                            controleur.deplacerAccessoire(index, position,false);
                        }else{
                            int x = (int)Convertisseur.parseFraction(xPosition)*12;
                            PointDecimal position = new PointDecimal(x + PositionDeMur.PositionXMurGaucheDroit, accessoireCourant.Position.getY());
                            controleur.deplacerAccessoire(index, position,false);
                        }
                        
                    }
                    repaint();

                } else {

                    Erreur error = new Erreur("La liste d'accessoires pour ce mur est vide");
                    List<Erreur> erreurs = new ArrayList<>();
                    erreurs.add(error);
                    afficherErreur(erreurs);
                    repaint();
                }

            } catch (Exception e) {
                Erreur error = new Erreur("inserer des valeurs correctes s'il vous plait, exemple 4/2");
                List<Erreur> erreurs = new ArrayList<>();
                erreurs.add(error);
                afficherErreur(erreurs);
                repaint();
            }

        } else {

            Erreur error = new Erreur("Selectionner un Mur svp");
            List<Erreur> erreurs = new ArrayList<>();
            erreurs.add(error);
            afficherErreur(erreurs);
            repaint();

        }

    }//GEN-LAST:event_deplacerAccessoireButtonActionPerformed
    /**
     * Gestionnaire d'événements pour le bouton destiné a modifier les
     * accessoires( Fenetre ou Porte).
     *
     * @param evt L'événement d'action.
     */

    private void deplacerModifierAccessoireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deplacerModifierAccessoireActionPerformed
        if (this.controleur.getVueCourant() != Orientation.DESSUS) {

            try {
                int index = listeAccessoireCombo.getSelectedIndex();
                int distanceMin =  3;
                String hauteur = Hauteur_modification.getText();
                String largeur = Largeur_modification.getText();
                String xPosition = Position_x_modification.getText();
                String yPosition = Position_y_modification.getText();
                MurDTO murCourant = this.controleur.getMurDTOCourant(this.controleur.getVueCourant());
                Dimension dimension = new Dimension(0,(int) Convertisseur.parseFraction(largeur)*12, (int)Convertisseur.parseFraction(hauteur)*12);
                if (listeAccessoireCombo.getItemCount() > 0) {
                    AccessoireDTO accessoireCourant = this.controleur.getMurDTOCourant(this.controleur.getVueCourant()).AccessoiresList.get(index);
                    TypeAccessoire typeAcc = accessoireCourant.TypeAccessoire;
                    if (this.controleur.getVueCourant() == Orientation.ARRIERE || this.controleur.getVueCourant() == Orientation.FACADE) {
                        if(typeAcc == TypeAccessoire.FENETRE){
                            PointDecimal pDecimal = new PointDecimal((int)Convertisseur.parseFraction(xPosition)*12, (int)Convertisseur.parseFraction(yPosition)*12);
                            pDecimal = new PointDecimal(pDecimal.getX() + PositionDeMur.PositionXMurFacadeArriere, pDecimal.getY() + PositionDeMur.PositionYMurFacadeArriere);
                            controleur.deplacerModifierAccessoire(index, dimension, pDecimal);
                        }else{
                            int x = (int)Convertisseur.parseFraction(xPosition)*12;
                            PointDecimal pDecimal = new PointDecimal(x + PositionDeMur.PositionXMurFacadeArriere, (PositionDeMur.PositionYMurFacadeArriere  + murCourant.Dimension.getHauteur()) -  (dimension.getHauteur()+distanceMin));
                            controleur.deplacerModifierAccessoire(index, dimension, pDecimal);
                        }
                        
                    } else {
                        if(typeAcc == TypeAccessoire.FENETRE){
                            PointDecimal pDecimal = new PointDecimal((int)Convertisseur.parseFraction(xPosition)*12, (int)Convertisseur.parseFraction(yPosition)*12);
                            pDecimal = new PointDecimal(pDecimal.getX() + PositionDeMur.PositionXMurGaucheDroit, pDecimal.getY() + PositionDeMur.PositionYMurGaucheDroit);
                            controleur.deplacerModifierAccessoire(index, dimension, pDecimal);
                        }else{
                            int x = (int)Convertisseur.parseFraction(xPosition)*12;
                            PointDecimal pDecimal = new PointDecimal(x + PositionDeMur.PositionXMurGaucheDroit, (PositionDeMur.PositionYMurGaucheDroit  + murCourant.Dimension.getHauteur()) -  (dimension.getHauteur()+distanceMin));
                            controleur.deplacerModifierAccessoire(index, dimension, pDecimal);
                        }
                    }
                    repaint();

                } else {

                    String erroMsg = "La liste d'accessoires de ce Mur est vide!";
                    Erreur error = new Erreur(erroMsg);
                    List<Erreur> erreurs = new ArrayList<>();
                    erreurs.add(error);
                    afficherErreur(erreurs);
                    repaint();
                }

            } catch (Exception e) {
                String erroMsg = "inserer des valeurs correctes s'il vous plait, exemple 4";
                Erreur error = new Erreur(erroMsg);
                List<Erreur> erreurs = new ArrayList<>();
                erreurs.add(error);
                afficherErreur(erreurs);
                repaint();
            }
        } else {
            Erreur error = new Erreur("Selectionner un Mur svp");
            List<Erreur> erreurs = new ArrayList<>();
            erreurs.add(error);
            afficherErreur(erreurs);
            repaint();
        }

    }//GEN-LAST:event_deplacerModifierAccessoireActionPerformed

    private void AjouterAccessoireButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_AjouterAccessoireButtonStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_AjouterAccessoireButtonStateChanged

    private void AideMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AideMenuMouseClicked
        showPopupWindow();
    }//GEN-LAST:event_AideMenuMouseClicked

    private void Hauteur_modificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hauteur_modificationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Hauteur_modificationActionPerformed

    private void listeAccessoireComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listeAccessoireComboActionPerformed
        Color colour = panneauEdition.getBackground();
        Border originalBorder = Position_x_modification.getBorder();
        int index = listeAccessoireCombo.getSelectedIndex();        
        if (index != -1 && listeAccessoireCombo.getItemCount() > 0)  // Vérifiez que l'index est valide
        {
            AccessoireDTO accessoireCourant = this.controleur.getMurDTOCourant(this.controleur.getVueCourant()).AccessoiresList.get(index);
            TypeAccessoire typeAcc = accessoireCourant.TypeAccessoire;
            if(typeAcc == TypeAccessoire.FENETRE)
            {
                Position_y_modification.setEnabled(true);
                Position_y_modification.setBorder(originalBorder);
                Position_y_modification.setBackground(colour.WHITE);
                Position_y_modification.setText("9/2");                    
                Label_modification_y.setVisible(true);
            }
            if(typeAcc == TypeAccessoire.PORTE)
            {      
                Position_y_modification.setEnabled(false);
                Position_y_modification.setBorder(new LineBorder(colour));  
                Position_y_modification.setBackground(colour);         
                Position_y_modification.setText("");
                Label_modification_y.setVisible(false);
            }
        }
        else
        {
            Position_y_modification.setEnabled(true);
            Position_y_modification.setBorder(originalBorder);
            Position_y_modification.setBackground(colour.WHITE);
            Position_y_modification.setText("9/2");                    
            Label_modification_y.setVisible(true);
        }
    }//GEN-LAST:event_listeAccessoireComboActionPerformed

    private void validerSensToitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validerSensToitActionPerformed
        String sensToit = (String) this.sensToitList.getSelectedItem();
        if ("AVANT-ARRIERE".equals(sensToit)) {
            this.controleur.setSensToit(SensToit.AVANT_ARRIERE);
        } else {
            this.controleur.setSensToit(SensToit.GAUCHE_DROITE);
        }
        sensToitListFirstValue();
        repaint();
    }//GEN-LAST:event_validerSensToitActionPerformed

    private void rainureValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rainureValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rainureValueActionPerformed

    private void btnEpaisseurMurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEpaisseurMurActionPerformed
        // TODO add your handling code here:
        try {
            String epaisseur = this.epaisseurMur.getText();
            int newEpaisseur = (int)this.Convertisseur.parseFraction(epaisseur);
            if(newEpaisseur >= 1){
                if (newEpaisseur % 2 != 0) {
                this.controleur.setEpaisseurMur(newEpaisseur+1);
                PositionDeMur.setEpaisseurMur(newEpaisseur);
                } 
                else{
                    this.controleur.setEpaisseurMur(newEpaisseur);
                    PositionDeMur.setEpaisseurMur(newEpaisseur);
                }
                repaint();
            }else{
                Erreur error = new Erreur("Entrez une valeur superieur a 1 svp.");
                List<Erreur> erreurs = new ArrayList<>();
                erreurs.add(error);
                afficherErreur(erreurs);
                repaint();
            }
            
        } catch (Exception e) {
            Erreur error = new Erreur("Entrez une bonne valeur de l'epaisseur svp");
            List<Erreur> erreurs = new ArrayList<>();
            erreurs.add(error);
            afficherErreur(erreurs);
            repaint();
        }
    }//GEN-LAST:event_btnEpaisseurMurActionPerformed

    private void Largeur_modificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Largeur_modificationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Largeur_modificationActionPerformed

    private void epaisseurRainureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_epaisseurRainureActionPerformed
        // TODO add your handling code here:
        try {
            this.controleur.setRainure((float) Convertisseur.poucePiedsVersEntierRainure(this.rainureValue.getText()));
            repaint();
        } catch (Exception e) {
            Erreur error = new Erreur("inserer des valeurs correctes s'il vous plait, exemple 4" + "\"1/4");
                List<Erreur> erreurs = new ArrayList<>();
                erreurs.add(error);
                afficherErreur(erreurs);
                repaint();
        }
    }//GEN-LAST:event_epaisseurRainureActionPerformed

    private void listMursItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listMursItemStateChanged

        int index = listMurs.getSelectedIndex();
        switch (index) {
            case 1:
                titreLabelAffichage.setText("FACADE");
                addAccessoireToComboBox();
                this.controleur.setVueCourant(Orientation.FACADE);
                addAccessoireToComboBox();
                sensToitListFirstValue();
                this.drawingPanel1.repaint();
                break;
            case 2:
                titreLabelAffichage.setText("ARRIERE");
                addAccessoireToComboBox();
                this.controleur.setVueCourant(Orientation.ARRIERE);
                addAccessoireToComboBox();
                sensToitListFirstValue();
                this.drawingPanel1.repaint();
                break;

            case 3:
                titreLabelAffichage.setText("GAUCHE");
                addAccessoireToComboBox();
                this.controleur.setVueCourant(Orientation.GAUCHE);
                addAccessoireToComboBox();
                sensToitListFirstValue();
                this.drawingPanel1.repaint();
                break;

            case 4:
                titreLabelAffichage.setText("DROITE");
                addAccessoireToComboBox();
                this.controleur.setVueCourant(Orientation.DROITE);
                addAccessoireToComboBox();
                sensToitListFirstValue();
                this.drawingPanel1.repaint();
                break;
            default:
                titreLabelAffichage.setText("DESSUS");
                addAccessoireToComboBox();
                this.controleur.setVueCourant(Orientation.DESSUS);
                addAccessoireToComboBox();
                sensToitListFirstValue();
                this.drawingPanel1.repaint();

        }
    }//GEN-LAST:event_listMursItemStateChanged


    private void drawingPanel1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_drawingPanel1MouseWheelMoved
        int zoomPointX = evt.getX();
        int zoomPointY = evt.getY();
        double zoomDelta = evt.getPreciseWheelRotation() * 0.1;//* 0.1;
        controleur.setZoomLevel(controleur.getZoomLevel() + zoomDelta, new Point2D.Double(zoomPointX, zoomPointY));
        
        drawingPanel1.repaint();

        //À verifier: l'accès à la liste de vrai mur!!!!
        MurDTO[] murDTOs = controleur.getChaletDTO().MurList;

        boolean seTouche;

        for (MurDTO mur : murDTOs) {
            Rectangle rectangleMur = new Rectangle((int) mur.Position.getX(), (int) mur.Position.getY(),
                    (int) mur.Dimension.getLargeur(), (int) mur.Dimension.getHauteur());

            Rectangle globalRectangleMur = SwingUtilities.convertRectangle(drawingPanel1, rectangleMur, drawingPanel1.getParent());

            seTouche = drawingPanel1.getBounds().intersects(globalRectangleMur);
            if (seTouche) {
               // System.out.println("Se touche: " + seTouche);
            } else {
                seTouche = false;
                // System.out.println("Se touche: " + seTouche);
            }

        }

        drawingPanel1.repaint();
    }//GEN-LAST:event_drawingPanel1MouseWheelMoved

    private void undoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_undoButtonMouseClicked
        // TODO add your handling code here:
        this.controleur.annuler();
        addAccessoireToComboBox();
        repaint();
    }//GEN-LAST:event_undoButtonMouseClicked

    private void redoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redoButtonMouseClicked
        // TODO add your handling code here:
        this.controleur.refaire();
        addAccessoireToComboBox();
        repaint();
    }//GEN-LAST:event_redoButtonMouseClicked

    private void ouvrirMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ouvrirMenuMouseClicked
        // TODO add your handling code here:
        
        JFileChooser selectionFichier = getFileChooser("Ouvrir un projet");

        if (selectionFichier.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File fichierProjet = selectionFichier.getSelectedFile();

            controleur.ouvrirProjet(fichierProjet.getAbsolutePath());
            titreLabelAffichage.setText("DESSUS");
            repaint();
        }

        repaint();
    }//GEN-LAST:event_ouvrirMenuMouseClicked

    private void validerAngleToitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validerAngleToitActionPerformed
        // TODO add your handling code here:

        try {
            float newAngle = (int)this.Convertisseur.parseFraction(this.angleToit.getText());
            this.controleur.setAngleToit(newAngle);
            
            repaint();
        } catch (Exception e) {
            Erreur error = new Erreur("Entrez une valeur valide de l'angle");
            List<Erreur> erreurs = new ArrayList<>();
            erreurs.add(error);
            afficherErreur(erreurs);
            repaint();
        }
    }//GEN-LAST:event_validerAngleToitActionPerformed

    private void listMursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listMursActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listMursActionPerformed

    private void drawingPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MousePressed
        if (this.controleur.getVueCourant() != Orientation.DESSUS) {
            MurDTO murCourant = this.controleur.getMurDTOCourant(this.controleur.getVueCourant());
            int i = 0;
            for (AccessoireDTO accessoire : murCourant.AccessoiresList) {
                Rectangle rec = new Rectangle((int) accessoire.Position.getX(), (int) accessoire.Position.getY(), (int) accessoire.Dimension.getLargeur(), (int) accessoire.Dimension.getHauteur());
                if (rec.contains(evt.getPoint())) {
                    this.uuidAccessoireCourant = accessoire.Uuid;
                    this.rectangle = rec;
                    typeAccessoireCourant = accessoire.TypeAccessoire;
                    this.indexAccessoireCourant = i;
                    initialMousePosition = evt.getPoint();
                }
                i++;
            }
            startPoint = evt.getPoint();
            endPoint = startPoint;
        }
    }//GEN-LAST:event_drawingPanel1MousePressed

    private void drawingPanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MouseReleased
        // TODO add your handling code here:
        initialMousePosition = null;
        typeAccessoireCourant = null;
        endPoint = evt.getPoint();
        if (this.controleur.getVueCourant() != Orientation.DESSUS) {
            if (startPoint != null && endPoint != null) {
                int x = Math.min(startPoint.x, endPoint.x);
                int y = Math.min(startPoint.y, endPoint.y);
                int width = Math.abs(startPoint.x - endPoint.x);
                int height = Math.abs(startPoint.y - endPoint.y);
                this.controleur.etatChalet();
                PointDecimal pointXY = new PointDecimal(x, y);
                Dimension dimensions = new Dimension(0, width, height);
                MurDTO mur = this.controleur.getMurDTOCourant(this.controleur.getVueCourant());
                Rectangle newAcc = new Rectangle((int) pointXY.getX(), (int) pointXY.getY(), width, height);
                Boolean intersectionExist = false;
                for (AccessoireDTO accessoire : mur.AccessoiresList) {
                    Rectangle existingAccessoire = new Rectangle((int) accessoire.Position.getX(), (int) accessoire.Position.getY(), (int) accessoire.Dimension.getLargeur(), (int) accessoire.Dimension.getHauteur());
                    if (newAcc.intersects(existingAccessoire)) {
                        intersectionExist = true;
                    }
                }
                
                repaint();
            }
        }

    }//GEN-LAST:event_drawingPanel1MouseReleased

    private void drawingPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MouseDragged
        // TODO add your handling code here:
        if (initialMousePosition != null) {
            int deltaX = evt.getX() - initialMousePosition.x;
            int deltaY = evt.getY() - initialMousePosition.y;
            AccessoireDTO accessoireCourant = this.controleur.getMurDTOCourant(this.controleur.getVueCourant()).AccessoiresList.get(indexAccessoireCourant);
            if (typeAccessoireCourant == TypeAccessoire.FENETRE) {

                PointDecimal position = new PointDecimal(rectangle.x + deltaX, rectangle.y + deltaY);
                this.controleur.deplacerAccessoire(indexAccessoireCourant, position,true);
            }
            if (typeAccessoireCourant == TypeAccessoire.PORTE) {

                PointDecimal position = new PointDecimal(rectangle.x + deltaX, accessoireCourant.Position.getY());
                this.controleur.deplacerAccessoire(indexAccessoireCourant, position,true);
            }
            repaint();
        }
        endPoint = evt.getPoint();

        repaint();
    }//GEN-LAST:event_drawingPanel1MouseDragged

    private void enregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enregistrerActionPerformed
        // TODO add your handling code here:
        enregistrer();
    }//GEN-LAST:event_enregistrerActionPerformed

    private void enregistrerSousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enregistrerSousActionPerformed
        // TODO add your handling code here:
        enregistrerSous();
    }//GEN-LAST:event_enregistrerSousActionPerformed

    private void SauvegarderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SauvegarderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SauvegarderActionPerformed

    private void dimensionChaletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dimensionChaletActionPerformed

        try {
                        
            String m_chaletHauteura = chaletHauteur1.getText();
            String m_chaletLongueura = chaletLongueur1.getText();
            String m_chaletLargeura = chaletLargeur1.getText();
            
            double chaletHauteurFinal = Convertisseur.parseFraction(m_chaletHauteura) * 12;
            double chaletLongueurFinal = Convertisseur.parseFraction(m_chaletLongueura) * 12;
            double chaletLargeurFinal = Convertisseur.parseFraction(m_chaletLargeura) * 12;
            this.controleur.modifierDimensionChalet(new Dimension((int)(chaletLongueurFinal),(int)chaletLargeurFinal,(int)chaletHauteurFinal));
            
            repaint();
        } catch (Exception exception) {
            String message = "Dimension saisie incorrecte, veuillez corriger! exmple 20/1 ou 12";
            String titre = "Dimension Chalet";
            afficherPopup(message, titre, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_dimensionChaletActionPerformed

    private void drawingPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MouseMoved
        // TODO add your handling code here:
        Point point = evt.getPoint();
        positionSouris.setText(point.x + "," + point.y);
    }//GEN-LAST:event_drawingPanel1MouseMoved
    public void boiteDialogueExportation(String typePanneau){
        dialogueExporter.setTitle("Exportation de panneaux " + typePanneau);
        dialogueExporter.setSize(600, 150);
        dialogueExporter.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        repositoryPath = new JTextField(40);
        repositoryPath.setEditable(false);

        JButton repository = new JButton("...");
        JButton cancelButton = new JButton("Annuler");
        JButton submitButton = new JButton("Exporter");

        repository.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser selectionDossier = new JFileChooser(FileSystemView.getFileSystemView());
                selectionDossier.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                selectionDossier.setDialogTitle("Sélectionner le répertoire d'exportation");
                selectionDossier.setApproveButtonText("Sélectionner");

                int result = selectionDossier.showOpenDialog(dialogueExporter);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedDirectory = selectionDossier.getSelectedFile();
                    repositoryPath.setText(selectedDirectory.getAbsolutePath());
                }
            }
        });
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
                dialogueExporter.setVisible(false);
            }
        });

        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (!repositoryPath.getText().isEmpty()) {
                    try {
                        
                        if("DeRetrait".equals(typePanneau)){
                            exportPanneauxRetraitASTL();
                            JOptionPane.showMessageDialog(dialogueExporter, "Les panneaux ont été exporté avec succès", "Confirmation", JOptionPane.INFORMATION_MESSAGE);
                            dialogueExporter.setVisible(false);
                        }
                        if("Bruts".equals(typePanneau)){
                            exportPanneauxBrutsASTL();
                            JOptionPane.showMessageDialog(dialogueExporter, "Les panneaux ont été exporté avec succès", "Confirmation", JOptionPane.INFORMATION_MESSAGE);
                            dialogueExporter.setVisible(false);
                        }
                        if("Finis".equals(typePanneau)){
                            exportPanneauxFinisASTL();
                            JOptionPane.showMessageDialog(dialogueExporter, "Les panneaux ont été exporté avec succès", "Confirmation", JOptionPane.INFORMATION_MESSAGE);
                            dialogueExporter.setVisible(false);
                        }
                        if("".equals(typePanneau)){
                            controleur.setCheminExportProjet(repositoryPath.getText() + "/");
                            exporterDimension(controleur.getCheminExportProjet());
                            JOptionPane.showMessageDialog(dialogueExporter, "Les dimensions ont été exporté avec succès", "Confirmation", JOptionPane.INFORMATION_MESSAGE);
                            dialogueExporter.setVisible(false);
                            
                        }
                        
                    } catch (FileNotFoundException | TransformerException ex) {
                        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                } else {
                    JOptionPane.showMessageDialog(dialogueExporter, "Sélectionner un dossier", "Erreur", JOptionPane.ERROR_MESSAGE);
                }

            }
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(cancelButton);
        buttonPanel.add(submitButton);

        JPanel repPanel = new JPanel();
        repPanel.add(repository);
        repPanel.add(repositoryPath);

        dialogueExporter.setLayout(new BorderLayout());
        dialogueExporter.add(repPanel, BorderLayout.NORTH);
        dialogueExporter.add(buttonPanel, BorderLayout.SOUTH);
        dialogueExporter.setVisible(true);
    }
    public void exportPanneauxRetraitASTL() throws FileNotFoundException, TransformerException{
       this.controleur.setCheminExportProjet(repositoryPath.getText() + "/");
       this.controleur.exporterPanneauxDeTrait();
    }
    public void exportPanneauxBrutsASTL(){
        this.controleur.setCheminExportProjet(repositoryPath.getText() + "/");
        this.controleur.exporterPanneauxBruts();
    }
    public void exportPanneauxFinisASTL() throws IOException{
        this.controleur.setCheminExportProjet(repositoryPath.getText() + "/");
        this.controleur.exporterPanneauxFinis();
    }
    private void panneauxFinisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panneauxFinisActionPerformed

        if (this.controleur.getCheminExportProjet().isEmpty()){
            boiteDialogueExportation("Finis");
            dialogueExporter.setVisible(true);
        }
        else{
            try {
                this.controleur.exporterPanneauxFinis();
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            String message = "Les panneaux ont été exporté avec succès!";
            String titre = "Exportation Panneaux de retraits";
            afficherPopup(message, titre, JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_panneauxFinisActionPerformed

    public void exporterDimension(String chemin){
        PositionMur positionMur =  new PositionMur();
        UUID uuid = UUID.randomUUID();
        String uuidString = uuid.toString();
        String firstFiveCharacters = uuidString.substring(0, 5);
        String filePath = chemin+ "DimensionsPanneaux" +firstFiveCharacters + ".txt";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            
            writer.write("Angle : " +  this.controleur.getChaletDTO().Toit.getAngleToit());
            writer.newLine();
            for(MurDTO mur : this.controleur.getChaletDTO().MurList){
                if(mur.Orientation == Orientation.ARRIERE || mur.Orientation == Orientation.FACADE){
                    writer.write("Mur : " +  mur.Orientation);
                    writer.write("  Longueur : " + mur.Dimension.getLongueur());
                    writer.write("  Hauteur : " + mur.Dimension.getHauteur());
                    writer.write("  Position X : " + positionMur.PositionXMurFacadeArriere);
                    writer.write("  Position Y : " + positionMur.PositionYMurFacadeArriere);
                    writer.newLine();
                    for(AccessoireDTO acc : mur.AccessoiresList){
                        writer.newLine();
                        writer.write("      "+acc.LabelAccessoire);
                        writer.write("  Largueur : " + acc.Dimension.getLargeur());
                        writer.write("  Hauteur : " + acc.Dimension.getHauteur());
                        writer.write("  Position X : " + acc.Position.getX());
                        writer.write("  Position Y : " + acc.Position.getY());
                        writer.newLine();
                    }
                }else{
                    writer.write("Mur : " +  mur.Orientation);
                    writer.write("  Largeur : " + mur.Dimension.getLargeur());
                    writer.write("  Hauteur : " + mur.Dimension.getHauteur());
                    writer.write("  Position X : " + positionMur.PositionXMurGaucheDroit);
                    writer.write("  Position Y : " + positionMur.PositionYMurGaucheDroit);
                    writer.newLine();
                    for(AccessoireDTO acc : mur.AccessoiresList){
                        writer.newLine();
                        writer.write("      "+acc.LabelAccessoire);
                        writer.write("  Largueur : " + acc.Dimension.getLargeur());
                        writer.write("  Hauteur : " + acc.Dimension.getHauteur());
                        writer.write("  Position X : " + acc.Position.getX());
                        writer.write("  Position Y : " + acc.Position.getY());
                        writer.newLine();
                    }
                }
                
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void panneauxBrutsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panneauxBrutsActionPerformed
        // TODO add your handling code here:
        if (this.controleur.getCheminExportProjet().isEmpty()){
            boiteDialogueExportation("Bruts");
            dialogueExporter.setVisible(true);
        }
        else{
            this.controleur.exporterPanneauxBruts();
            String message = "Les panneaux ont été exporté avec succès!";
            String titre = "Exportation Panneaux de retraits";
            afficherPopup(message, titre, JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_panneauxBrutsActionPerformed

    private void panneauxDeRetraitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panneauxDeRetraitActionPerformed
        // TODO add your handling code here:
        if (this.controleur.getCheminExportProjet().isEmpty()){
            if(this.controleur.isListsAccessoireVide() || this.controleur.atLeastOneValidAccessoireVide() == false){
               String message = "Aucun Accessoire valide à exporter en STL";
                String titre = "Exportation Panneaux de retraits";
                afficherPopup(message, titre, JOptionPane.ERROR_MESSAGE);
            }else{
                boiteDialogueExportation("DeRetrait");
                dialogueExporter.setVisible(true);
            }
            
        }
        else{
            this.controleur.exporterPanneauxDeTrait();
            String message = "Les panneaux ont été exporté avec succès!";
            String titre = "Exportation Panneaux de retraits";
            afficherPopup(message, titre, JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_panneauxDeRetraitActionPerformed

    private void positionYAccessoireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionYAccessoireActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_positionYAccessoireActionPerformed

    private void Position_x_modificationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Position_x_modificationFocusLost
        // TODO add your handling code here:
        if (Position_x_modification.getText().isEmpty())
        {         
            Position_x_modification.setText("9/2");
        }

    }//GEN-LAST:event_Position_x_modificationFocusLost

    private void Position_y_modificationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Position_y_modificationFocusLost
        // TODO add your handling code here:
         if (Position_y_modification.getText().isEmpty())
        {
            Position_y_modification.setText("9/2");
        }

    }//GEN-LAST:event_Position_y_modificationFocusLost

    private void Position_y_modificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Position_y_modificationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Position_y_modificationActionPerformed

    private void Hauteur_modificationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Hauteur_modificationFocusLost
       if (Hauteur_modification.getText().isEmpty())
        {
            Hauteur_modification.setText("9/2");
        }

    }//GEN-LAST:event_Hauteur_modificationFocusLost

    private void Largeur_modificationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Largeur_modificationFocusLost
        if (Largeur_modification.getText().isEmpty())
        {
            Largeur_modification.setText("23/2");
        }

    }//GEN-LAST:event_Largeur_modificationFocusLost

    private void hauteurAccessoireFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hauteurAccessoireFocusLost
        // TODO add your handling code here:
        if (hauteurAccessoire.getText().isEmpty())
        {
            hauteurAccessoire.setText("12/2");
        }
    }//GEN-LAST:event_hauteurAccessoireFocusLost

    private void largeurAccessoireFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_largeurAccessoireFocusLost
        // TODO add your handling code here:
        if (largeurAccessoire.getText().isEmpty())
        {
            largeurAccessoire.setText("10");
        }
    }//GEN-LAST:event_largeurAccessoireFocusLost

    private void positionXAccessoireFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_positionXAccessoireFocusLost
        // TODO add your handling code here:
        if (positionXAccessoire.getText().isEmpty())
        {
            positionXAccessoire.setText("9");
        }
    }//GEN-LAST:event_positionXAccessoireFocusLost

    private void positionYAccessoireFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_positionYAccessoireFocusLost
        // TODO add your handling code here:
        if (positionYAccessoire.getText().isEmpty())
        {
            positionYAccessoire.setText("8");
        }
    }//GEN-LAST:event_positionYAccessoireFocusLost

    private void ResetZoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetZoomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ResetZoomActionPerformed

    private void ResetZoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResetZoomMouseClicked
        // TODO add your handling code here:
//        int zoomPointX = evt.getX();
//        int zoomPointY = evt.getY();    
        controleur.setZoomLevelDefault();
        drawingPanel1.repaint();

    }//GEN-LAST:event_ResetZoomMouseClicked

    private void vueArriereMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vueArriereMouseClicked
        // TODO add your handling code here:        
        listMurs.setSelectedItem("Arriere");     
//        vueDessus.setBackground(Color.LIGHT_GRAY);
//        vueDessus.setOpaque(true);
//        vueDessus.setBorderPainted(false);
//        vueDessus.repaint();
    }//GEN-LAST:event_vueArriereMouseClicked

    private void vueFacadeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vueFacadeMouseClicked
        // TODO add your handling code here:
        listMurs.setSelectedItem("Facade");
    }//GEN-LAST:event_vueFacadeMouseClicked

    private void vueGaucheMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vueGaucheMouseClicked
        // TODO add your handling code here:
        listMurs.setSelectedItem("Gauche");
    }//GEN-LAST:event_vueGaucheMouseClicked

    private void vueDroiteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vueDroiteMouseClicked
        // TODO add your handling code here:
        listMurs.setSelectedItem("Droite");
    }//GEN-LAST:event_vueDroiteMouseClicked

    private void vueDessusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vueDessusMouseClicked
        // TODO add your handling code here:
        listMurs.setSelectedIndex(0);
    }//GEN-LAST:event_vueDessusMouseClicked

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_formFocusGained

    private void rainureValueFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rainureValueFocusLost
        // TODO add your handling code here:
        if (rainureValue.getText().isEmpty())
        {
        rainureValue.setText("1");
        }
    }//GEN-LAST:event_rainureValueFocusLost

    private void epaisseurMurFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_epaisseurMurFocusLost
        // TODO add your handling code here:
        if (epaisseurMur.getText().isEmpty())
                {
        epaisseurMur.setText("4/2");
                }
    }//GEN-LAST:event_epaisseurMurFocusLost

    private void angleToitFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_angleToitFocusLost
        // TODO add your handling code here:
        if (angleToit.getText().isEmpty())
        {
        angleToit.setText("24/2");
        }
    }//GEN-LAST:event_angleToitFocusLost

    private void hauteurAccessoireKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hauteurAccessoireKeyTyped
        char typedChar = evt.getKeyChar();

        if (typedChar == '\n') 
        {
            AjouterAccessoireButtonActionPerformed(null);
        } 
    }//GEN-LAST:event_hauteurAccessoireKeyTyped

    private void largeurAccessoireKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_largeurAccessoireKeyTyped
        // TODO add your handling code here:
        char typedChar = evt.getKeyChar();

        if (typedChar == '\n') 
        {
            AjouterAccessoireButtonActionPerformed(null);
        }            
    }//GEN-LAST:event_largeurAccessoireKeyTyped

    private void positionXAccessoireKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_positionXAccessoireKeyTyped
        
         // TODO add your handling code here:
        char typedChar = evt.getKeyChar();

        if (typedChar == '\n') 
        {
            AjouterAccessoireButtonActionPerformed(null);
        } 
    }//GEN-LAST:event_positionXAccessoireKeyTyped

    private void positionYAccessoireKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_positionYAccessoireKeyTyped
        
         // TODO add your handling code here:
        char typedChar = evt.getKeyChar();

        if (typedChar == '\n') 
        {
            AjouterAccessoireButtonActionPerformed(null);
        } 
    }//GEN-LAST:event_positionYAccessoireKeyTyped

    private void Position_x_modificationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Position_x_modificationKeyTyped
        
         // TODO add your handling code here:
        char typedChar = evt.getKeyChar();

        if (typedChar == '\n') 
        {
            deplacerAccessoireButtonActionPerformed(null);
        } 
    }//GEN-LAST:event_Position_x_modificationKeyTyped

    private void Position_y_modificationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Position_y_modificationKeyTyped
        // TODO add your handling code here:
        char typedChar = evt.getKeyChar();

        if (typedChar == '\n') 
        {
            deplacerAccessoireButtonActionPerformed(null);
        } 
    }//GEN-LAST:event_Position_y_modificationKeyTyped

    private void Hauteur_modificationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Hauteur_modificationKeyTyped
        // TODO add your handling code here:
        char typedChar = evt.getKeyChar();

        if (typedChar == '\n') 
        {
            modifierAccessoireButtonActionPerformed(null);
        } 
    }//GEN-LAST:event_Hauteur_modificationKeyTyped

    private void Largeur_modificationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Largeur_modificationKeyTyped
        // TODO add your handling code here:
        char typedChar = evt.getKeyChar();

        if (typedChar == '\n') 
        {
            modifierAccessoireButtonActionPerformed(null);
        } 
    }//GEN-LAST:event_Largeur_modificationKeyTyped

    private void angleToitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_angleToitKeyTyped
        // TODO add your handling code here:
        char typedChar = evt.getKeyChar();

        if (typedChar == '\n') 
        {
            validerAngleToitActionPerformed(null);
        } 
    }//GEN-LAST:event_angleToitKeyTyped

    private void angleToitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_angleToitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_angleToitActionPerformed

    private void epaisseurMurKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_epaisseurMurKeyTyped
        // TODO add your handling code here:
        char typedChar = evt.getKeyChar();

        if (typedChar == '\n') 
        {
            btnEpaisseurMurActionPerformed(null);
        } 
    }//GEN-LAST:event_epaisseurMurKeyTyped

    private void rainureValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rainureValueKeyTyped
        // TODO add your handling code here:
        char typedChar = evt.getKeyChar();

        if (typedChar == '\n') 
        {
            epaisseurRainureActionPerformed(null);
        } 
    }//GEN-LAST:event_rainureValueKeyTyped

    private void valeurGrilleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valeurGrilleFocusLost
        // TODO add your handling code here:
        if (valeurGrille.getText().isEmpty())
        {
        valeurGrille.setText("5/2");
        }
    }//GEN-LAST:event_valeurGrilleFocusLost

    private void valeurGrilleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valeurGrilleKeyTyped
        // TODO add your handling code here:
        char typedChar = evt.getKeyChar();

        if (typedChar == '\n') 
        {
            afficheurGrilleButtonActionPerformed(null);
        } 
    }//GEN-LAST:event_valeurGrilleKeyTyped

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // TODO add your handling code here:
        int premiereOption = JOptionPane.showConfirmDialog(null, "Souhaitez-vous sauvegarder votre projet avant de réinitialiser?", "Avertissement", JOptionPane.YES_NO_OPTION);

        if (premiereOption == JOptionPane.YES_OPTION) {
            enregistrer();
            this.controleur.reinializeChalet(new Chalet());
            this.listeAccessoireCombo.removeAllItems();
            
        } else {
            int secondOption = JOptionPane.showConfirmDialog(null, "Etes-vous certain ?", "Avertissement", JOptionPane.YES_NO_OPTION);
            if(secondOption == JOptionPane.YES_OPTION){
                this.controleur.reinializeChalet(new Chalet());
                this.listeAccessoireCombo.removeAllItems();
            }else{
                enregistrer();
                this.controleur.reinializeChalet(new Chalet());
                this.listeAccessoireCombo.removeAllItems();
            }
            
        }
        repaint();
        
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        if (this.controleur.getCheminExportProjet().isEmpty()){
            boiteDialogueExportation("");
            dialogueExporter.setVisible(true);
        }
        else{
            exporterDimension(this.controleur.getCheminExportProjet());
            String message = "Les dimensions ont été exporté avec succès!";
            String titre = "Exportation Dimensions";
            afficherPopup(message, titre, JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void chaletHauteur1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chaletHauteur1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_chaletHauteur1FocusLost

    private void chaletHauteur1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chaletHauteur1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_chaletHauteur1KeyTyped

    private void chaletLongueur1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chaletLongueur1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_chaletLongueur1FocusLost

    private void chaletLongueur1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chaletLongueur1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_chaletLongueur1KeyTyped

    private void chaletLargeur1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chaletLargeur1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_chaletLargeur1FocusLost

    private void chaletLargeur1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chaletLargeur1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_chaletLargeur1KeyTyped

    private void Position_x_modificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Position_x_modificationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Position_x_modificationActionPerformed
    private double calculateMaxZoom() {
        double maxZoomWidth = drawingPanel1.getWidth() / (double) drawingPanel1.getWidth();
        double maxZoomHeight = drawingPanel1.getHeight() / (double) drawingPanel1.getHeight();
        return Math.min(maxZoomWidth, maxZoomHeight);
    }

 //   static int maxWidth = drawingPanel1.getWidth();
   // static int maxHeight = drawingPanel1.getHeight();
    
    private void showPopupWindow() {
        JDialog popup = new JDialog();
        popup.setTitle("Aide");
        popup.setSize(800, 480);
        popup.setLocationRelativeTo(this); // Center the popup relative to the current window

        JTextArea textArea = new JTextArea();
        textArea.setLineWrap(true); // Enable automatic line wrapping
        textArea.setWrapStyleWord(true); // Wrap at word boundaries
        textArea.setEditable(false); // Make it read-only

        String instructions = "L'application est un outil de conception pour visualiser des chalets. Elle comporte quatre onglets :\n\n"
                + "1. Vues : Affiche les 5 perspectives du chalet : Vue arrière, Vue de gauche, Vue de façade, Vue de droite et Vue de dessus. Cliquez sur une vue pour afficher le chalet dans la perspective souhaitée.\n\n"
                + "2. Mur : Permet d'ajouter, supprimer, déplacer ou modifier des accessoires (portes ou fenêtres) sur un mur choisi. \n Pour ajouter, saisissez la hauteur, la largeur, la position en x et y, puis appuyez sur \"Ajouter accessoire\". \n Pour supprimer, choisissez dans la liste d'accessoires et appuyez sur \"Supprimer accessoire\". \n Pour déplacer, entrez les nouvelles coordonnées et appuyez sur \"Déplacer accessoire\". \n Pour modifier, saisissez la nouvelle hauteur et largeur, puis appuyez sur \"Modifier accessoire\". \n Vous pouvez également déplacer et modifier en même temps en appuyant sur \"Déplacer et Modifier Accessoire\".\n\n C'est la liste Liste Accesoires qui est utilisée pour la suppression, donc si vous souhaitez supprimer un accessoire veuillez le seléctionner dans cette liste:\n\n"
                + "3. Toit : Permet de porter certaine modification au toit du chalet. \n Modifiez l'angle en écrivant le nouvel angle et appuyez sur \"Valider angle\". \n Modifiez le sens du toit en saisissant le nouveau sens et appuyez sur \"Valider sens du toit\".\n\n"
                + "4. Chalet : Permet de porter certaine modification à la totalité du chalet. \n Changez l'épaisseur des panneaux en écrivant la nouvelle épaisseur et en appuyant sur \"Valider épaisseur panneau\". \n Changez l'épaisseur des rainures en écrivant la nouvelle épaisseur et en appuyant sur \"Valider épaisseur rainure\". \n Changez les dimensions du chalet (x, y, z) en les écrivants et puis appuyez sur \"Valider dimensions du chalet\".\n\n"
                + "De plus, en haut de l'application, vous trouverez une barre de menu :\n"
                + "- Fichier : Permet d'effectuer des modifications sur le fichier.\n"
                + "- Édition : Comprend des raccourcis pour apporter des modifications à différentes parties du chalet.\n"
                + "- Sauvegarder : Pour enregistrer votre projet.\n"
                + "- Exportation Panneau : Permet d'exporter des éléments dans le format souhaité.\n"
                + "- Quitter : Pour quitter l'application.";

        textArea.setText(instructions);
        textArea.setCaretPosition(0); // Scroll to the top

        JScrollPane scrollPane = new JScrollPane(textArea);
        popup.add(scrollPane);

        popup.setVisible(true);
    }

    private void enregistrer() {
        if (controleur.getCheminProjet().isBlank()) {
            // Si le chemin du fichier n'est pas défini, utilisez la logique d'enregistrement sous
            enregistrerSous();
        } else {
            controleur.enregistrerProjet();
            JOptionPane.showMessageDialog(this, "Projet enregistré avec succès.", "Enregistrement", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void enregistrerSous() {
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Enregistrer sous");

    if (!controleur.getCheminProjet().isBlank()) {
        File projectDirectory = new File(controleur.getCheminProjet()).getParentFile();
        fileChooser.setCurrentDirectory(projectDirectory);
    }

    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();

        // Vérifier si le fichier existe déjà
        if (selectedFile.exists()) {
            // Fichier existant, demander confirmation à l'utilisateur
            int result = JOptionPane.showConfirmDialog(this, "Le fichier existe déjà. Voulez-vous le remplacer ?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.NO_OPTION) {
                // Annuler l'enregistrement si l'utilisateur choisit de ne pas remplacer le fichier existant
                return;
            }
        }

        controleur.setNomDuProjet(selectedFile.getName()); // Recupération du nom du projet pour le STL
        String cheminFichier = selectedFile.getAbsolutePath();
        controleur.setCheminProjet(cheminFichier);
        controleur.enregistrerProjet();
        JOptionPane.showMessageDialog(this, "Projet enregistré avec succès.", "Enregistrement", JOptionPane.INFORMATION_MESSAGE);
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    
    
private void boiteExportationToutInitial() {
        if (controleur.getCheminExportProjet().isBlank()) {
            // Si le chemin du fichier n'est pas défini, utilisez la logique de boiteExportationTout()
            boiteExportationTout();
        } else {
			controleur.exportSTL();
            JOptionPane.showMessageDialog(this, "Projet complet est exporté  avec succès.", "Exportation", JOptionPane.INFORMATION_MESSAGE);
        }
    }
	

private void boiteExportationTout() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Exporter Tout");

        if (!controleur.getCheminProjet().isBlank()) {
            File projectDirectory = new File(controleur.getCheminProjet()).getParentFile();
            fileChooser.setCurrentDirectory(projectDirectory);
        }

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String cheminFichier = selectedFile.getAbsolutePath();
            controleur.setCheminExportProjet(cheminFichier);
            controleur.exportSTL();
            JOptionPane.showMessageDialog(this, "Projet complet est exporté  avec succès.", "Exportation", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AideMenu;
    private javax.swing.JButton AjouterAccessoireButton;
    private javax.swing.JMenuBar BarreDeMenu;
    private javax.swing.JMenu ExportationMenu;
    private javax.swing.JTextField Hauteur_modification;
    private javax.swing.JLabel Label_modification_y;
    private javax.swing.JLabel Label_position_y;
    private javax.swing.JTextField Largeur_modification;
    private javax.swing.JTextField Position_x_modification;
    private javax.swing.JTextField Position_y_modification;
    private javax.swing.JMenu QuitterMenu;
    private javax.swing.JButton ResetZoom;
    private javax.swing.JMenu Sauvegarder;
    private javax.swing.JButton SupprimerAccessoireButton;
    private javax.swing.JButton afficheurGrilleButton;
    private javax.swing.JTextField angleToit;
    private javax.swing.JButton btnEpaisseurMur;
    private javax.swing.JTextField chaletHauteur1;
    private javax.swing.JTextField chaletLargeur1;
    private javax.swing.JTextField chaletLongueur1;
    private javax.swing.JButton deplacerAccessoireButton;
    private javax.swing.JButton deplacerModifierAccessoire;
    private javax.swing.JButton dimensionChalet;
    private ca.ulaval.glo2004.gui.DrawingPanel drawingPanel1;
    private javax.swing.JMenuItem enregistrer;
    private javax.swing.JMenuItem enregistrerSous;
    private javax.swing.JTextField epaisseurMur;
    private javax.swing.JButton epaisseurRainure;
    private javax.swing.JTextField hauteurAccessoire;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField largeurAccessoire;
    private javax.swing.JComboBox<String> listMurs;
    private javax.swing.JComboBox<String> listeAccessoireCombo;
    private javax.swing.JButton modifierAccessoireButton;
    private javax.swing.JMenu ouvrirMenu;
    private javax.swing.JPanel panneauDeChalet;
    private javax.swing.JPanel panneauDeReference;
    private javax.swing.JPanel panneauDeToit;
    private javax.swing.JPanel panneauDeVues;
    private javax.swing.JPanel panneauEdition;
    private javax.swing.JMenuItem panneauxBruts;
    private javax.swing.JMenuItem panneauxDeRetrait;
    private javax.swing.JMenuItem panneauxFinis;
    private javax.swing.JTextField positionSouris;
    private javax.swing.JTextField positionXAccessoire;
    private javax.swing.JTextField positionYAccessoire;
    private javax.swing.JTextField rainureValue;
    private javax.swing.JButton redoButton;
    private javax.swing.JComboBox<String> sensToitList;
    private javax.swing.JTextField titreLabelAffichage;
    private javax.swing.JComboBox<String> typesAccessoire;
    private javax.swing.JButton undoButton;
    private javax.swing.JTextField valeurGrille;
    private javax.swing.JButton validerAngleToit;
    private javax.swing.JButton validerSensToit;
    private javax.swing.JButton vueArriere;
    private javax.swing.JButton vueDessus;
    private javax.swing.JButton vueDroite;
    private javax.swing.JButton vueFacade;
    private javax.swing.JButton vueGauche;
    // End of variables declaration//GEN-END:variables
}
